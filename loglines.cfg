[redis]
host = localhost
port = 6379
db = 0

[redis_test]
host = localhost
port = 6379
db = 1

[supervisor]
port = 127.0.0.1:9001
username = guest
password = guest

[logger_logfilewatcher]
command = ./logfilewatcher.py
pushto = loglines
servicename = ora.bodleian.ox.ac.uk
logfile = temp.log
stdout_logfile = workerlogs/logfilewatcher.log

[worker_broker]
listento = loglines
command = ./broker.py
fanout = pirus2
fanout_status_queue = broker_temp
# Time in seconds to sleep if there is nothing on the queue
idletime = 1
stdout_logfile = workerlogs/broker.log

[worker_pirus2]
listento = pirus2
command = ./pirus2.py
debug = true
numprocs = 3
# repository_plugin ==> module holding the repository-specific functions:
# parseline(line) - returns a dictionary of name-value pairs parsed from the log line it was given (NB including "id"!)
#  --> it is expected that the line is a json dictionary/array with two keys: 'service' and 'logline'
#      service should contain the source id, which will be used as the 'rfr_id' in the OpenURL params
#      logline should be whatever string your system outputs as a logged line
# get_open_url_params(parseline_dict) - return the params to be used in the OpenURL request to the Pirus2 endpoint
# (optional) get_metadata(id, [file_id]) - given an id and optionally a file id, return a dictionary of values that combined with the parseline dictionary
#   can be used to create the pirus2 OpenURL specification.
repository_plugin = plugins.ora_utils
# OpenURL default details
endpoint_url = http://cclibweb-4.dmz.cranfield.ac.uk/tracker/
url_ver = Z39.88-2004
rfr_id = ora.bodleian.ox.ac.uk
# Expected HTTP status for success
success = 200
# Timeout for request
timeout = 60
# pause for 3600 seconds (1 hr) if fail to push request
pauseonfail = 3600
# Rate-limit (in requests per second per process)
ratelimit = 1
# Where to pass on loglines on success (comment out to ignore)
success_queue = articlelog
# Where to pass on loglines that aren't relevant to pirus2 (ie not a journal article download)
other_queue = otherlog
stdout_logfile = workerlogs/pirus2.log

[logger_articlelogger]
listento = articlelog
command = ./logfromqueue.py
logfile = logs/articles.log
stdout_logfile = workerlogs/articlelogger.log

[logger_otherlogger]
listento = otherlog
command = ./logfromqueue.py
logfile = logs/other.log
stdout_logfile = workerlogs/otherlogger.log

